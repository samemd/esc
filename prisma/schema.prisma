generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  name          String    @unique
  isLocked      Boolean   @default(false)
  lockAt        DateTime?
  showResults   Boolean   @default(false)
  showCountdown Boolean   @default(true)
}

model Bet {
  id           Int      @id @default(autoincrement())
  winner       String
  second       String
  third        String
  last         String
  winningScore String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  String   @unique
  createdBy    User     @relation(fields: [createdById], references: [id])
}

model Ranking {
  country  String  @unique
  position Int     @unique
  score    String?
}

model Score {
  id           Int      @id @default(autoincrement())
  score        Int
  calculatedAt DateTime @default(now())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  bet           Bet?
  Score         Score?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
